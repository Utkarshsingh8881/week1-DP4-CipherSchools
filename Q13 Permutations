class Solution {
public:
 
    vector<int> slice(int ind, vector<int>& nums) {
        vector<int> slicedVector;
        for(int i = 0; i < nums.size(); i++) {
            if (i == ind) continue;
            slicedVector.push_back(nums[i]);
        }
 
        return slicedVector;
    }
 
    vector<vector<int>> findPerm(vector<int> nums) {
        // Base case
        if (nums.size() == 1) {
            return {nums};
        }
 
        // Recursive step
        vector<vector<int>> allPerms;
        for(int i = 0; i < nums.size(); i++) {
            vector<int> remainingElements = slice(i, nums);
            vector<vector<int>> perms = findPerm(remainingElements);
 
            for(int j = 0; j < perms.size(); j++) {
                perms[j].push_back(nums[i]);
            }

            for(int j = 0; j < perms.size(); j++) {
                allPerms.push_back(perms[j]);
            }
        }
 
        return allPerms;
    }
 
    vector<vector<int>> permute(vector<int>& nums) {
        return findPerm(nums);
    }
};
